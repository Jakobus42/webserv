<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="LoggerManager_8cpp" kind="file" language="C++">
    <compoundname>LoggerManager.cpp</compoundname>
    <includes refid="LoggerManager_8hpp" local="yes">../../include/logger/LoggerManager.hpp</includes>
    <incdepgraph>
      <node id="11">
        <label>../../include/logger/FileLogger.hpp</label>
        <link refid="FileLogger_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../../include/logger/ConsoleLogger.hpp</label>
        <link refid="ConsoleLogger_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="12">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>src/logger/LoggerManager.cpp</label>
        <link refid="LoggerManager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ctime</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>../../include/logger/ALogger.hpp</label>
        <link refid="ALogger_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../../include/logger/LoggerManager.hpp</label>
        <link refid="LoggerManager_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelogger">logger</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../../include/logger/LoggerManager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelogger" kindref="compound">logger</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classlogger_1_1LoggerManager_1adb629fe3dad321a3083c877904089bd2" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1LoggerManager_1adb629fe3dad321a3083c877904089bd2" kindref="member">LoggerManager::LoggerManager</ref>()<sp/>:<sp/>m_globalLogLevel(<ref refid="namespacelogger" kindref="compound">logger</ref>::<ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2aee60ac495f4eb6180461caa975e30732" kindref="member">INFO</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classlogger_1_1LoggerManager_1a119535f84d9f16eec5bf332f96e0f9c9" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1LoggerManager" kindref="compound">LoggerManager</ref>&amp;<sp/><ref refid="classlogger_1_1LoggerManager_1a119535f84d9f16eec5bf332f96e0f9c9" kindref="member">LoggerManager::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager" kindref="compound">LoggerManager</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlogger_1_1LoggerManager_1a2dfcb8ecb7a5c803dc4aaee1e92ad17b" kindref="member">m_globalLogLevel</ref><sp/>=<sp/>other.<ref refid="classlogger_1_1LoggerManager_1a2dfcb8ecb7a5c803dc4aaee1e92ad17b" kindref="member">m_globalLogLevel</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classlogger_1_1LoggerManager_1ad140bde7c3a4c9241fb147f2c864d018" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1LoggerManager" kindref="compound">LoggerManager</ref>&amp;<sp/><ref refid="classlogger_1_1LoggerManager_1ad140bde7c3a4c9241fb147f2c864d018" kindref="member">LoggerManager::getInstance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager" kindref="compound">LoggerManager</ref><sp/>instance;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classlogger_1_1LoggerManager_1ae26ebcbad9c6e4f85769438abac46db5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager_1ae26ebcbad9c6e4f85769438abac46db5" kindref="member">LoggerManager::registerLogger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>loggerName,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref>*<sp/><ref refid="namespacelogger" kindref="compound">logger</ref>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.insert(std::make_pair(loggerName,<sp/><ref refid="namespacelogger" kindref="compound">logger</ref>));</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classlogger_1_1LoggerManager_1adf2a8a1ad83a5404d6249518fa460971" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager_1adf2a8a1ad83a5404d6249518fa460971" kindref="member">LoggerManager::unregisterLogger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>loggerName)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>LogMap::iterator<sp/>it<sp/>=<sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.find(loggerName);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.erase(it);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classlogger_1_1LoggerManager_1a539f10100bd82dadfa0fffe8f77b9547" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager_1a539f10100bd82dadfa0fffe8f77b9547" kindref="member">LoggerManager::log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(LogMap::iterator<sp/>it<sp/>=<sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlogger_1_1LoggerManager_1a2dfcb8ecb7a5c803dc4aaee1e92ad17b" kindref="member">m_globalLogLevel</ref><sp/>&lt;=<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;log(message,<sp/>level);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classlogger_1_1LoggerManager_1a45d840b2a9bd9fbfccb34689ddc79527" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager_1a45d840b2a9bd9fbfccb34689ddc79527" kindref="member">LoggerManager::setLoggerLevel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>loggerName,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>LogMap::iterator<sp/>it<sp/>=<sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.find(loggerName);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="classlogger_1_1LoggerManager_1af2885846001affd86a455cf297797fce" kindref="member">m_loggers</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;second-&gt;setLevel(level);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classlogger_1_1LoggerManager_1a7237ff5a6cead3d670328feb6ea60cbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager_1a7237ff5a6cead3d670328feb6ea60cbd" kindref="member">LoggerManager::setGlobalLogLevel</ref>(<ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="classlogger_1_1LoggerManager_1a2dfcb8ecb7a5c803dc4aaee1e92ad17b" kindref="member">m_globalLogLevel</ref><sp/>=<sp/>level;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classlogger_1_1LoggerManager_1a9b189b4a2165b561d16ccc31021ee4b0" refkind="member"><highlight class="normal"><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref><sp/><ref refid="classlogger_1_1LoggerManager_1a9b189b4a2165b561d16ccc31021ee4b0" kindref="member">LoggerManager::getGlobalLogLevel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1LoggerManager_1a2dfcb8ecb7a5c803dc4aaee1e92ad17b" kindref="member">m_globalLogLevel</ref>;<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>logger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/logger/LoggerManager.cpp"/>
  </compounddef>
</doxygen>
