<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="FileLogger_8cpp" kind="file" language="C++">
    <compoundname>FileLogger.cpp</compoundname>
    <includes refid="FileLogger_8hpp" local="yes">../../include/logger/FileLogger.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>../../include/logger/FileLogger.hpp</label>
        <link refid="FileLogger_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>src/logger/FileLogger.cpp</label>
        <link refid="FileLogger_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ctime</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>../../include/logger/ALogger.hpp</label>
        <link refid="ALogger_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelogger">logger</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../../include/logger/FileLogger.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelogger" kindref="compound">logger</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classlogger_1_1FileLogger_1a13ba0a5d2e2950f857f299a41eb2664f" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1FileLogger_1a13ba0a5d2e2950f857f299a41eb2664f" kindref="member">FileLogger::FileLogger</ref>()<sp/>:<sp/><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref>(),<sp/>m_logFile(</highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">,<sp/>std::ofstream::out)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlogger_1_1FileLogger_1ad798ac8c8d7da29489e6a72ff495e773" kindref="member">m_logFile</ref>.is_open())<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>log<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classlogger_1_1FileLogger_1a1ae20c44cdc0349c98fc3e831ae175fe" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1FileLogger_1a13ba0a5d2e2950f857f299a41eb2664f" kindref="member">FileLogger::FileLogger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref>(),<sp/>m_logFile(filename.c_str(),<sp/>std::ofstream::out)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlogger_1_1FileLogger_1ad798ac8c8d7da29489e6a72ff495e773" kindref="member">m_logFile</ref>.is_open())<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>log<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classlogger_1_1FileLogger_1a8c70b89657187c8334a38a903c8c7329" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1FileLogger_1a8c70b89657187c8334a38a903c8c7329" kindref="member">FileLogger::~FileLogger</ref>()<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlogger_1_1FileLogger_1ad798ac8c8d7da29489e6a72ff495e773" kindref="member">m_logFile</ref>.is_open())<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlogger_1_1FileLogger_1ad798ac8c8d7da29489e6a72ff495e773" kindref="member">m_logFile</ref>.close();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classlogger_1_1FileLogger_1af6f1deb1755fb9ec70c11ccdb791bdf3" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1FileLogger_1a13ba0a5d2e2950f857f299a41eb2664f" kindref="member">FileLogger::FileLogger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1FileLogger" kindref="compound">FileLogger</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classlogger_1_1FileLogger_1a4b3b06e56ae78eaa36b646154caa046f" refkind="member"><highlight class="normal"><ref refid="classlogger_1_1FileLogger" kindref="compound">FileLogger</ref>&amp;<sp/><ref refid="classlogger_1_1FileLogger_1a4b3b06e56ae78eaa36b646154caa046f" kindref="member">FileLogger::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1FileLogger" kindref="compound">FileLogger</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlogger_1_1ALogger_1a79c10bd36140f92374bb98ee3adb33ef" kindref="member">ALogger::operator=</ref>(other);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classlogger_1_1FileLogger_1a1e96849853bcbdde388872138751606b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlogger_1_1FileLogger_1a1e96849853bcbdde388872138751606b" kindref="member">FileLogger::log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlogger_1_1FileLogger_1ad798ac8c8d7da29489e6a72ff495e773" kindref="member">m_logFile</ref>.is_open())<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>file<sp/>is<sp/>not<sp/>open.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlogger_1_1ALogger_1a9122ceab60ec3ff5d240d37fcf125344" kindref="member">m_currentLogLevel</ref><sp/>&lt;=<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlogger_1_1FileLogger_1ad798ac8c8d7da29489e6a72ff495e773" kindref="member">m_logFile</ref><sp/>&lt;&lt;<sp/><ref refid="classlogger_1_1ALogger_1a993700fc347b0dc071283b42df5c8ad4" kindref="member">getLogPrefix</ref>(level)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>logger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/logger/FileLogger.cpp"/>
  </compounddef>
</doxygen>
