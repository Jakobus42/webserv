<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlogger_1_1ALogger" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>logger::ALogger</compoundname>
    <derivedcompoundref refid="classlogger_1_1ConsoleLogger" prot="public" virt="non-virtual">logger::ConsoleLogger</derivedcompoundref>
    <derivedcompoundref refid="classlogger_1_1FileLogger" prot="public" virt="non-virtual">logger::FileLogger</derivedcompoundref>
    <includes refid="ALogger_8hpp" local="no">ALogger.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlogger_1_1ALogger_1a9122ceab60ec3ff5d240d37fcf125344" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref></type>
        <definition>LogLevel logger::ALogger::m_currentLogLevel</definition>
        <argsstring></argsstring>
        <name>m_currentLogLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="48" column="12" bodyfile="include/logger/ALogger.hpp" bodystart="48" bodyend="-1"/>
        <referencedby refid="classlogger_1_1ALogger_1a0ff4e250a3f838c5f766901aac53e645" compoundref="ALogger_8cpp" startline="63" endline="63">getLevel</referencedby>
        <referencedby refid="classlogger_1_1ConsoleLogger_1ac85920c5cdc2b6560a52e32d6757936c" compoundref="ConsoleLogger_8cpp" startline="58" endline="66">logger::ConsoleLogger::log</referencedby>
        <referencedby refid="classlogger_1_1FileLogger_1a1e96849853bcbdde388872138751606b" compoundref="FileLogger_8cpp" startline="72" endline="84">logger::FileLogger::log</referencedby>
        <referencedby refid="classlogger_1_1ALogger_1a79c10bd36140f92374bb98ee3adb33ef" compoundref="ALogger_8cpp" startline="39" endline="44">operator=</referencedby>
        <referencedby refid="classlogger_1_1ALogger_1a601ae64c4455599cb8be6e03edd3f469" compoundref="ALogger_8cpp" startline="54" endline="54">setLevel</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlogger_1_1ALogger_1a40ab0d997f116c8b520476d56d944a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>logger::ALogger::ALogger</definition>
        <argsstring>()</argsstring>
        <name>ALogger</name>
        <briefdescription>
<para>Constructs a new <ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref> object with the default log level set to INFO. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object with a default log level of DEBUG. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="37" column="3" bodyfile="src/logger/ALogger.cpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1aab9395b0c65d7c6ad484f75ee8443dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>logger::ALogger::ALogger</definition>
        <argsstring>(const ALogger &amp;other)</argsstring>
        <name>ALogger</name>
        <param>
          <type>const <ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object as a copy of an existing one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="39" column="3" bodyfile="src/logger/ALogger.cpp" bodystart="28" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1a0ff4e250a3f838c5f766901aac53e645" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref></type>
        <definition>LogLevel logger::ALogger::getLevel</definition>
        <argsstring>() const</argsstring>
        <name>getLevel</name>
        <briefdescription>
<para>Returns the current log level. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the current log level of the logger.</para>
<para><simplesect kind="return"><para>The current log level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="43" column="12" bodyfile="src/logger/ALogger.cpp" bodystart="63" bodyend="63"/>
        <references refid="classlogger_1_1ALogger_1a9122ceab60ec3ff5d240d37fcf125344" compoundref="ALogger_8hpp" startline="48">m_currentLogLevel</references>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1a432d93d4ad4a568c178492e9912e145a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void logger::ALogger::log</definition>
        <argsstring>(const std::string &amp;message, LogLevel level)=0</argsstring>
        <name>log</name>
        <reimplementedby refid="classlogger_1_1ConsoleLogger_1ac85920c5cdc2b6560a52e32d6757936c">log</reimplementedby>
        <reimplementedby refid="classlogger_1_1FileLogger_1a1e96849853bcbdde388872138751606b">log</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="45" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1a79c10bd36140f92374bb98ee3adb33ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref> &amp;</type>
        <definition>ALogger &amp; logger::ALogger::operator=</definition>
        <argsstring>(const ALogger &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Assigns the state of another <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object to this one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object to assign from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="40" column="11" bodyfile="src/logger/ALogger.cpp" bodystart="39" bodyend="44"/>
        <references refid="classlogger_1_1ALogger_1a9122ceab60ec3ff5d240d37fcf125344" compoundref="ALogger_8hpp" startline="48">m_currentLogLevel</references>
        <referencedby refid="classlogger_1_1ConsoleLogger_1ab398d355ce729292792e3f79c7a3a4c4" compoundref="ConsoleLogger_8cpp" startline="43" endline="46">logger::ConsoleLogger::operator=</referencedby>
        <referencedby refid="classlogger_1_1FileLogger_1a4b3b06e56ae78eaa36b646154caa046f" compoundref="FileLogger_8cpp" startline="59" endline="64">logger::FileLogger::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1a601ae64c4455599cb8be6e03edd3f469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger::ALogger::setLevel</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>setLevel</name>
        <param>
          <type><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the current log level. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the log level of the logger. Only messages with a level less than or equal to this new level will be logged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The new log level to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="42" column="8" bodyfile="src/logger/ALogger.cpp" bodystart="54" bodyend="54"/>
        <references refid="classlogger_1_1ALogger_1a9122ceab60ec3ff5d240d37fcf125344" compoundref="ALogger_8hpp" startline="48">m_currentLogLevel</references>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1ae489d5ee98076eaf1614e1b196aaefe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>logger::ALogger::~ALogger</definition>
        <argsstring>()</argsstring>
        <name>~ALogger</name>
        <briefdescription>
<para>Destroys the <ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources used by the <computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> object. This is a virtual destructor to ensure proper cleanup in derived classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="38" column="11" bodyfile="src/logger/ALogger.cpp" bodystart="19" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classlogger_1_1ALogger_1a993700fc347b0dc071283b42df5c8ad4" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string logger::ALogger::getLogPrefix</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>getLogPrefix</name>
        <param>
          <type><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Creates Prefix for Logs. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls getLogLevelAsString and getTimeStamp to create the log msg Prefix. Example output: &quot;[DEBUG]   [2024-09-11 14:30:45]&quot;</para>
<para><simplesect kind="return"><para>std::string representing the prefix for the log msg. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the conversion of the time to local time fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="50" column="22" bodyfile="src/logger/ALogger.cpp" bodystart="122" bodyend="124"/>
        <references refid="classlogger_1_1ALogger_1aeec7dc86db5a5df42d02b494e24802cf" compoundref="ALogger_8cpp" startline="74" endline="88">getLogLevelAsString</references>
        <references refid="classlogger_1_1ALogger_1a0b5d4d94c2eac993058f212848cab04a" compoundref="ALogger_8cpp" startline="101" endline="111">getTimeStamp</references>
        <referencedby refid="classlogger_1_1ConsoleLogger_1ac85920c5cdc2b6560a52e32d6757936c" compoundref="ConsoleLogger_8cpp" startline="58" endline="66">logger::ConsoleLogger::log</referencedby>
        <referencedby refid="classlogger_1_1FileLogger_1a1e96849853bcbdde388872138751606b" compoundref="FileLogger_8cpp" startline="72" endline="84">logger::FileLogger::log</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classlogger_1_1ALogger_1aeec7dc86db5a5df42d02b494e24802cf" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string logger::ALogger::getLogLevelAsString</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>getLogLevelAsString</name>
        <param>
          <type><ref refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2" kindref="member">LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Converts a log level to its string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts the specified log level to a readable string, such as &quot;[INFO]&quot; or &quot;[ERROR]&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the provided log level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="53" column="22" bodyfile="src/logger/ALogger.cpp" bodystart="74" bodyend="88"/>
        <references refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2a0b189dfc00bfa02dd8c23d7d6e1a538c" compoundref="ALogger_8hpp" startline="17">logger::DEBUG</references>
        <references refid="namespacelogger_1a4bdf4a007480caa09a13bc5ed26eb58a" compoundref="ALogger_8hpp" startline="11">logger::DEBUG_COLOR</references>
        <references refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2aca19ca2d7cd37bf3d7fc92322b429601" compoundref="ALogger_8hpp" startline="17">logger::ERROR</references>
        <references refid="namespacelogger_1a4065c149e6d1faaed9469c3138c54ebb" compoundref="ALogger_8hpp" startline="14">logger::ERROR_COLOR</references>
        <references refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2a6526ebf74c120c19c814fb5b34ad2dd4" compoundref="ALogger_8hpp" startline="17">logger::FATAL</references>
        <references refid="namespacelogger_1ac01e6f4a115fd8f03b975f063c39637b" compoundref="ALogger_8hpp" startline="15">logger::FATAL_COLOR</references>
        <references refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2aee60ac495f4eb6180461caa975e30732" compoundref="ALogger_8hpp" startline="17">logger::INFO</references>
        <references refid="namespacelogger_1ab62ed0a1ac8927bd416d1dc7eba37001" compoundref="ALogger_8hpp" startline="12">logger::INFO_COLOR</references>
        <references refid="namespacelogger_1a78195500ea706df91bdd58cf8020f1ea" compoundref="ALogger_8hpp" startline="10">logger::RESET</references>
        <references refid="namespacelogger_1a08ef41fb8da9e671d65fcbd87b6574a2af962c30f6356d10c93ed16a802e7adf7" compoundref="ALogger_8hpp" startline="17">logger::WARNING</references>
        <references refid="namespacelogger_1a3114cb96ac58326da2e4bb97f7cdf792" compoundref="ALogger_8hpp" startline="13">logger::WARNING_COLOR</references>
        <referencedby refid="classlogger_1_1ALogger_1a993700fc347b0dc071283b42df5c8ad4" compoundref="ALogger_8cpp" startline="122" endline="124">getLogPrefix</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlogger_1_1ALogger_1a0b5d4d94c2eac993058f212848cab04a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string logger::ALogger::getTimeStamp</definition>
        <argsstring>()</argsstring>
        <name>getTimeStamp</name>
        <briefdescription>
<para>Retrieves the current timestamp in a formatted string. </para>
        </briefdescription>
        <detaileddescription>
<para>This method obtains the current local time and formats it as a string in the format &quot;YYYY-MM-DD HH:MM:SS&quot;. The timestamp is enclosed in square brackets.</para>
<para>Example output: &quot;[2024-09-11 14:30:45]&quot;</para>
<para><simplesect kind="return"><para>std::string A string representing the current timestamp. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the conversion of the time to local time fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logger/ALogger.hpp" line="54" column="22" bodyfile="src/logger/ALogger.cpp" bodystart="101" bodyend="111"/>
        <referencedby refid="classlogger_1_1ALogger_1a993700fc347b0dc071283b42df5c8ad4" compoundref="ALogger_8cpp" startline="122" endline="124">getLogPrefix</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base class for logging functionality. </para>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="classlogger_1_1ALogger" kindref="compound">ALogger</ref></computeroutput> provides a framework for logging systems, managing log levels (DEBUG, INFO, WARNING, ERROR, FATAL) and formatting log messages with color-coding. It defines:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classlogger_1_1ALogger_1a601ae64c4455599cb8be6e03edd3f469" kindref="member">setLevel()</ref></computeroutput> and <computeroutput><ref refid="classlogger_1_1ALogger_1a0ff4e250a3f838c5f766901aac53e645" kindref="member">getLevel()</ref></computeroutput>: To manage log levels.</para>
</listitem><listitem><para><computeroutput><ref refid="classlogger_1_1ALogger_1a432d93d4ad4a568c178492e9912e145a" kindref="member">log()</ref></computeroutput>: To log messages (to be implemented by derived classes).</para>
</listitem><listitem><para><computeroutput><ref refid="classlogger_1_1ALogger_1aeec7dc86db5a5df42d02b494e24802cf" kindref="member">getLogLevelAsString()</ref></computeroutput>: Returns a string representation of the log level, with colors.</para>
</listitem></itemizedlist>
</para>
<para>Derived classes must implement the logging logic. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>logger::ALogger</label>
        <link refid="classlogger_1_1ALogger"/>
      </node>
      <node id="3">
        <label>logger::FileLogger</label>
        <link refid="classlogger_1_1FileLogger"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>logger::ConsoleLogger</label>
        <link refid="classlogger_1_1ConsoleLogger"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/logger/ALogger.hpp" line="35" column="1" bodyfile="include/logger/ALogger.hpp" bodystart="35" bodyend="55"/>
    <listofallmembers>
      <member refid="classlogger_1_1ALogger_1a40ab0d997f116c8b520476d56d944a98" prot="public" virt="non-virtual"><scope>logger::ALogger</scope><name>ALogger</name></member>
      <member refid="classlogger_1_1ALogger_1aab9395b0c65d7c6ad484f75ee8443dbe" prot="public" virt="non-virtual"><scope>logger::ALogger</scope><name>ALogger</name></member>
      <member refid="classlogger_1_1ALogger_1a0ff4e250a3f838c5f766901aac53e645" prot="public" virt="non-virtual"><scope>logger::ALogger</scope><name>getLevel</name></member>
      <member refid="classlogger_1_1ALogger_1aeec7dc86db5a5df42d02b494e24802cf" prot="private" virt="non-virtual"><scope>logger::ALogger</scope><name>getLogLevelAsString</name></member>
      <member refid="classlogger_1_1ALogger_1a993700fc347b0dc071283b42df5c8ad4" prot="protected" virt="non-virtual"><scope>logger::ALogger</scope><name>getLogPrefix</name></member>
      <member refid="classlogger_1_1ALogger_1a0b5d4d94c2eac993058f212848cab04a" prot="private" virt="non-virtual"><scope>logger::ALogger</scope><name>getTimeStamp</name></member>
      <member refid="classlogger_1_1ALogger_1a432d93d4ad4a568c178492e9912e145a" prot="public" virt="pure-virtual"><scope>logger::ALogger</scope><name>log</name></member>
      <member refid="classlogger_1_1ALogger_1a9122ceab60ec3ff5d240d37fcf125344" prot="protected" virt="non-virtual"><scope>logger::ALogger</scope><name>m_currentLogLevel</name></member>
      <member refid="classlogger_1_1ALogger_1a79c10bd36140f92374bb98ee3adb33ef" prot="public" virt="non-virtual"><scope>logger::ALogger</scope><name>operator=</name></member>
      <member refid="classlogger_1_1ALogger_1a601ae64c4455599cb8be6e03edd3f469" prot="public" virt="non-virtual"><scope>logger::ALogger</scope><name>setLevel</name></member>
      <member refid="classlogger_1_1ALogger_1ae489d5ee98076eaf1614e1b196aaefe9" prot="public" virt="virtual"><scope>logger::ALogger</scope><name>~ALogger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
